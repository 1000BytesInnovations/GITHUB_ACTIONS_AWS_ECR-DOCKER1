name: pusher

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:

  deploy-infrastructure-ecr:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
   
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation create-stack \
            --stack-name your-stack-name \
            --template-body file://./aws_templates/ecr.yml \
            --parameters \
              ParameterKey=ClusterName,ParameterValue=your-cluster-name \
            --capabilities CAPABILITY_NAMED_IAM \
          || aws cloudformation update-stack \
            --stack-name your-stack-name \
            --template-body file://./aws_templates/ecr.yml \
            --parameters \
              ParameterKey=RepositoryName,ParameterValue=your-ecr-repository-name \
            --capabilities CAPABILITY_NAMED_IAM

  build-and-push:
    needs: deploy-infrastructure-ecr
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: viv:latest
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_TAG .
          docker push $ECR_REGISTRY/$IMAGE_TAG

  deploy-infrastructure-ecs:
    needs: build-and-push
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy ecs CloudFormation Stack
        run: |
          aws cloudformation create-stack --stack-name stackx --template-body file://./aws_templates/ecs.yml --capabilities CAPABILITY_NAMED_IAM || \
          aws cloudformation update-stack --stack-name stackx --template-body file://./aws_templates/ecs.yml --capabilities CAPABILITY_NAMED_IAM || \
          echo "No updates required for the existing CloudFormation stack."
